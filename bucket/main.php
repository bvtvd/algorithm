<?php

/**
 * 三个水桶等分8升水的问题
 * 1. 穷举法
 * 2. 从初始状态 [8, 0, 0] 通过不同的倒水动作导致的状态变化可以组成一颗状态树, 状态树上的所有状态构成了穷举算法的解空间, 从初始状态到终止状态的任一一条路径都是这个问题的解
 * 3. 关键点: 倒水动作, 存水状态
 * 4. 对于树状结构的搜索, 可以采用深度优先搜索算法(DFS), 也可以采用广度优先搜索算法(BFS). 本题更适合使用深度优先遍历算发. 
 * 5. 状态树的遍历暗含了状态的生成过程, 驱动转态的转化是非常重要的部分
 * 6. 遍历3个水桶的所有可能的倒水动作, 就是对三个水桶的任取两个进行全排列, 可以得到6中水桶的排列关系
 * 7. 剪枝和重复状态的判断, 避免形成状态环路, 应该对当前深度遍历过程中经过的搜索路径上所有已经搜索过的状态做一个记录, 形成一个当前已经处理过得状态表. 
 * 8. 通过递归来实现深度优先的状态树搜索
 */

$start = microtime(true);

// 水桶数量
define('BUCKETS_COUNT', 3); 

/**
 * 记录某一时刻三个水桶中的存水状态
 * 静止转态 + 倒水动作
 */
class BucketState
{
    // 静止状态, 用于记录三桶水的当前状态
    public $bucket_s;

    // 倒水动作
    public $curAction = [
        'from' => 0,
        'to' => 0,
        'water' => 0
    ];
    
    // 每个水桶的体积
    public $bucket_capicity = [
        0 => 8,
        1 => 5,
        2 => 3
    ];

    public function __construct($bucket = [0, 0, 0])
    {
        $this->bucket_s = $bucket;
    }

    /**
     * 是否是合法的倒水动作
     * 需要结合当前的三个水桶的存水状态判断
     */
    public function canTakeDumpAction($from, $to)
    {
        // 数据校验
        if(!(($from >= 0 ) && ($from < BUCKETS_COUNT))){
            throw new Exception('buckets index error [$from]:'. $from);
        }

        if(!(($to >= 0 ) && ($to < BUCKETS_COUNT))){
            throw new Exception('buckets index error [$to]:'. $to);
        }

        // 1.不是同一个水桶
        // 2. from 桶中有水
        // 3. to 桶中不满
        if(
            ($from != $to)
            && !$this->isBucketEmpty($from)
            && !$this->isBucketFull($to)
        ){
            return true;
        }

        return false;
    }

    /**
     * 判断是否为空桶
     */
    public function isBucketEmpty($index)
    {
        return $this->bucket_s[$index] == 0;
    }

    /**
     * 判断是否为满桶
     */
    public function isBucketFull($index)
    {
        return $this->bucket_s[$index] == $this->bucket_capicity[$index];
    }

    /**
     * 倒水, 并设置新状态
     */
    public function dumpWater($from, $to, &$next)
    {
        // 将新的状态改为当前状态
        $next->setBuckets($this->bucket_s);
        $dump_water = $this->bucket_capicity[$to] - $next->bucket_s[$to];
        if($next->bucket_s[$from] >= $dump_water){
            // 接受桶能接受的容量小于倒水桶的容量
            $next->bucket_s[$to] += $dump_water;
            $next->bucket_s[$from] -= $dump_water;
        }else{
            // 接受桶能接受的容量大于到水桶的容量
            $next->bucket_s[$to] += $next->bucket_s[$from];
            $dump_water = $next->bucket_s[$from];
            $next->bucket_s[$from] = 0;
        }
        if($dump_water > 0){
            // 是一个有效的倒水动作
            $next->setAction($dump_water, $from, $to);
            return true;
        }
        
        return false;
    }

    /**
     * 设置倒水动作
     */
    public function setAction($water, $from, $to)
    {
        $this->curAction = [
            'from' => $from,
            'to' => $to,
            'water' => $water
        ];
    }

    /**
     * 设置水桶的禁止状态
     */
    public function setBuckets($bucket)
    {
        $this->bucket_s = $bucket;
    }

    /**
     * 检查当前状态是否为最终状态
     */
    public function isFinalState()
    {
        return $this->bucket_s[0] == 4 && $this->bucket_s[1] == 4 && $this->bucket_s[2] == 0;
    }
}

/**
 * 剪枝和重复状态判断
 */
function isProcessedState(&$states, &$newState)
{
    // 遍历 $states 中的每一个成员的 bucket_s 属性 是否与 $newState 中的相同
    foreach($states as $state){
        // 没有差集, 完全相等, 是重复状态
        // 这里要带索引检查
        if(!array_diff_assoc($state->bucket_s, $newState->bucket_s) && !array_diff_assoc($newState->bucket_s, $state->bucket_s)){
            return true;
        }
    }
    return false;
}

/**
 * 算法实现
 */

 /**
  * 状态搜索算法的核心
  */
function searchState(&$states)
{
    // 获取当前列表中的最后一个状态
    $current = $states[count($states) - 1];
    if($current->isFinalState()){
        // 最终状态, 打印结果
        printResult($states);
        return;
    }

    // 不是最终结果, 排列组合各种倒水状态
    for($i = 0; $i < BUCKETS_COUNT; ++$i){
        for($j = 0; $j < BUCKETS_COUNT; ++$j){
            searchStateOnAction($states, $current, $j, $i);
        }
    }

}


/**
 * 搜索算法的递归关系
 */
function searchStateOnAction(&$states, &$current, $from, $to)
{
    // 先判断是否能进行倒水动作
    if($current->canTakeDumpAction($from, $to)){
        $next = new BucketState();

        // 从 $from 到 $to 倒水, 如果成功, 返回倒水后的状态
        $result = $current->dumpWater($from, $to, $next);
        if($result && !isProcessedState($states, $next)){
            array_push($states, $next); // 成功的话讲新的状态添加到数组, 然后继续深度搜索
            searchState($states);   
            array_pop($states); // 这个节点搜索完成之后, 这个节点已经成为脏数据, 需要进行剔除
        }
    }
}


/**
 * 输出搜索结果
 */
function printResult(&$states)
{
    static $i = 1;
    $string = '';
    foreach($states as $state){
        $from = $state->curAction['from'] + 1;
        $to = $state->curAction['to'] + 1;
        $string .= "{{$from}, {$to}, {$state->curAction['water']}}->[{$state->bucket_s[0]}, {$state->bucket_s[1]}, {$state->bucket_s[2]}]"; 
    }

    echo $i. ". " . $string, "\n";
    ++$i;
}


// 后面的代码是运算
$first = new BucketState([8, 0, 0]);
$first->setAction(8, -2, 0);    // 设置一个上帝水桶, 作为第一个倒水动作(可忽略)
/**
 * 状态表
 * 记录已经处理过了的状态
 */
$states = [];
array_push($states, $first);

// 开始搜索
searchState($states);

$use = bcsub(microtime(true), $start, 5);
echo "use {$use}s\n";

/*

1. {-1, 1, 8}->[8, 0, 0]{1, 2, 5}->[3, 5, 0]{1, 3, 3}->[0, 5, 3]{2, 1, 5}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2, 1}->[7, 1, 0]{1, 3, 3}->[4, 1, 3]{3, 2, 3}->[4, 4, 0]

2. {-1, 1, 8}->[8, 0, 0]{1, 2, 5}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{2, 1, 2}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2, 1}->[7, 1, 0]{1, 3, 3}->[4, 1, 3]{3, 2, 3}->[4, 4, 0]

3. {-1, 1, 8}->[8, 0, 0]{1, 2, 5}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{1, 3, 1}->[0, 5, 3]{2, 1, 5}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2, 1}->[7, 1, 0]{1, 3,
3}->[4, 1, 3]{3, 2, 3}->[4, 4, 0]

4. {-1, 1, 8}->[8, 0, 0]{1, 2, 5}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{2, 1, 4}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2, 1}->[7, 1, 0]{1, 3,
3}->[4, 1, 3]{3, 2, 3}->[4, 4, 0]

5. {-1, 1, 8}->[8, 0, 0]{1, 2, 5}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{3, 1, 3}->[4, 4, 0]

6. {-1, 1, 8}->[8, 0, 0]{1, 2, 5}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{1, 2, 1}->[0, 5, 3]{2, 1, 5}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2,
1}->[7, 1, 0]{1, 3, 3}->[4, 1, 3]{3, 2, 3}->[4, 4, 0]

7. {-1, 1, 8}->[8, 0, 0]{1, 2, 5}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 3, 1}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2, 1}->[7, 1, 0]{1, 3, 3}->[4, 1, 3]{3, 2, 3}->[4, 4, 0]

8. {-1, 1, 8}->[8, 0, 0]{1, 2, 5}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{1, 2, 3}->[0, 5, 3]{2, 1, 5}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2, 1}->[7, 1, 0]{1, 3, 3}->[4, 1, 3]{3, 2, 3}->[4, 4, 0]

9. {-1, 1, 8}->[8, 0, 0]{1, 3, 3}->[5, 0, 3]{1, 2, 5}->[0, 5, 3]{3, 1, 3}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{3, 1, 3}->[4, 4, 0]

10. {-1, 1, 8}->[8, 0, 0]{1, 3, 3}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 2, 2}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{3, 1, 3}->[4, 4, 0]

11. {-1, 1, 8}->[8, 0, 0]{1, 3, 3}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{1, 2, 2}->[0, 5, 3]{3, 1, 3}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{3, 1, 3}->[4, 4, 0]

12. {-1, 1, 8}->[8, 0, 0]{1, 3, 3}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2, 1}->[7, 1, 0]{1, 2, 4}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{3, 1,
 3}->[4, 4, 0]

13. {-1, 1, 8}->[8, 0, 0]{1, 3, 3}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2, 1}->[7, 1, 0]{1, 3, 3}->[4, 1, 3]{1, 2, 4}->[0, 5, 3]{3, 1, 3}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2,
 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{3, 1, 3}->[4, 4, 0]

14. {-1, 1, 8}->[8, 0, 0]{1, 3, 3}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{2, 1, 5}->[7, 0, 1]{3, 2, 1}->[7, 1, 0]{1, 3, 3}->[4, 1, 3]{3, 2, 3}->[4, 4, 0]

15. {-1, 1, 8}->[8, 0, 0]{1, 3, 3}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{3, 1, 1}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{3, 1, 3}->[4, 4, 0]

16. {-1, 1, 8}->[8, 0, 0]{1, 3, 3}->[5, 0, 3]{3, 2, 3}->[5, 3, 0]{1, 3, 3}->[2, 3, 3]{3, 2, 2}->[2, 5, 1]{1, 3, 2}->[0, 5, 3]{3, 1, 3}->[3, 5, 0]{2, 3, 3}->[3, 2, 3]{3, 1, 3}->[6, 2, 0]{2, 3, 2}->[6, 0, 2]{1, 2, 5}->[1, 5, 2]{2, 3, 1}->[1, 4, 3]{3, 1, 3}->[4, 4, 0]

*/